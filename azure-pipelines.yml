trigger:
- master

variables:
  BuildConfiguration: 'Release'
  BuildPlatform: 'any cpu'
  PathToProjects: '**/ATA.Food.Server.Api.csproj'

jobs:  
- job: Build
  displayName: Build Powered by YAML
  pool:
    name: Default
  steps:
    #task: Use .NET Core sdk 6.x
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk 6.x' 
      inputs:
        version: 6.x

        #task: Use Node 6.x => Typscript build require it
    - task: NodeTool@0
      displayName: 'Use Node 6.x'

        #task: Restore
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: $(PathToProjects)
        vstsFeed: 'f5d0ca62-2bdf-417c-b55e-0f9a8acddc7a'

        #task: Powershell replace 'Client' with 'None' => In Directory.Build.props so the codes can be generated in client side without error
    - task: PowerShell@2
      displayName: Powershell replace 'Client' with 'None'
      inputs:
        targetType: 'inline'
        script: (Get-Content Directory.Build.props) -replace '>Client<' , '>None<' | Out-File Directory.Build.props

        #task: Build 
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: '$(PathToProjects)'
        arguments: '--configuration $(BuildConfiguration)'

        #task: Powershell replace 'None' to 'Client' => Now the codes are generated and everything is ready to full build of Bit Blazor application
    - task: PowerShell@2
      displayName: Powershell replace 'None' with 'Client'
      inputs:
        targetType: 'inline'
        script: (Get-Content Directory.Build.props) -replace '>None<' , '>Client<' | Out-File Directory.Build.props

        #task: Build
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: '$(PathToProjects)'
        arguments: '--configuration $(BuildConfiguration)'

        #task: Publish
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: false
        projects: $(PathToProjects)
        arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
        zipAfterPublish: True

        #task: Publish Artifact
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
      condition: succeededOrFailed()
